from layers.convolutional_layer import ConvlutionalLayer
from layers.maxpooling_layer import MaxPooling
from layers.activation_layer import Activation 
import numpy as np


if __name__ == "__main__":
    input_kernel_size = 30
    input_shape = (30, 30)
    output_kernel_size = 10
    output_shape = (26, 26)
    input_row, input_col = input_shape
    output_row, output_col = output_shape
    
    network_setting = {"input_kernel_size" : input_kernel_size,
                       "input_shape" : input_shape,
                       "output_kernel_size" : output_kernel_size,
                       "output_shape" : output_shape,
                       "window_size" : 5,
                       "step_size" : 1
                       }

    models = [ConvlutionalLayer(network_setting), MaxPooling(), Activation()]
    
    X = np.ones((input_kernel_size, input_row, input_col))
    t = np.ones((output_kernel_size, output_row / 2, output_col / 2))
    
    output = X
    for m in models:
        output = m.forward_calculate(output)
        
    prev_delta = output - t
    for m in models[::-1]:
        prev_delta = m.back_calculation(prev_delta)

    for m in models:
        m.update()
       
    print output

